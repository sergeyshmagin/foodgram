services:
  # PostgreSQL база данных
  db:
    container_name: foodgram-db
    image: postgres:13.10
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - foodgram-network

  # Redis для кеширования
  redis:
    container_name: foodgram-redis
    image: redis:7.0-alpine
    command: >
      sh -c "
      if [ -n '${REDIS_PASSWORD}' ]; then
        redis-server --requirepass '${REDIS_PASSWORD}' --appendonly yes
      else
        redis-server --appendonly yes
      fi
      "
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: >
        sh -c "
        if [ -n '${REDIS_PASSWORD}' ]; then
          redis-cli -a '${REDIS_PASSWORD}' ping
        else
          redis-cli ping
        fi
        "
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - foodgram-network

  # MinIO для хранения файлов
  minio:
    container_name: foodgram-minio
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - foodgram-network

  # Backend Django приложение
  backend:
    container_name: foodgram-backend
    build: 
      context: ../backend
      dockerfile: Dockerfile.prod
    env_file:
      - .env
    volumes:
      - media_files:/app/media
      - static_files:/app/staticfiles
      - logs:/app/logs
      - sent_emails:/app/sent_emails
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - foodgram-network

  # Frontend React приложение
  frontend:
    container_name: foodgram-frontend
    build: 
      context: ../frontend
      dockerfile: Dockerfile.prod
    volumes:
      - frontend_build:/app/build
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - foodgram-network

  # Nginx реверс-прокси
  nginx:
    container_name: foodgram-nginx
    image: nginx:1.25.4-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - frontend_build:/usr/share/nginx/html
      - static_files:/var/html/static
      - media_files:/var/html/media
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /var/www/certbot:/var/www/certbot
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - foodgram-network

volumes:
  postgres_data:
    name: foodgram-postgres
  redis_data:
    name: foodgram-redis
  minio_data:
    name: foodgram-minio
  media_files:
    name: foodgram-media
  static_files:
    name: foodgram-static
  frontend_build:
    name: foodgram-frontend
  logs:
    name: foodgram-logs
  sent_emails:
    name: foodgram-sent-emails

networks:
  foodgram-network:
    name: foodgram-network
    driver: bridge 