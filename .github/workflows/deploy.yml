name: Deploy Foodgram to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROD_HOST: 89.169.174.76
  DOMAIN: foodgram.freedynamicdns.net

jobs:
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements/development.txt
        
    - name: Run tests
      run: |
        cd backend
        python -m pytest --tb=short -v
        
    - name: Check code style
      run: |
        cd backend
        flake8 .

  deploy:
    name: Deploy to production
    runs-on: ubuntu-latest
    needs: tests
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ env.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          set -e
          
          echo "Переход в рабочую директорию..."
          cd /home/foodgram/app || {
            echo "Создание рабочей директории..."
            mkdir -p /home/foodgram/app
            cd /home/foodgram/app
          }
          
          echo "Проверка SSL сертификатов..."
          if [ ! -f "/etc/letsencrypt/live/${{ env.DOMAIN }}/fullchain.pem" ]; then
            echo "⚠️  SSL сертификаты не найдены. Запустите скрипт setup_ssl_certbot.sh"
            echo "Для первого деплоя выполните:"
            echo "bash scripts/deploy/setup_ssl_certbot.sh"
            exit 1
          fi
          
          echo "Обновление кода..."
          if [ -d ".git" ]; then
            git fetch origin
            git reset --hard origin/main
          else
            git clone https://github.com/${{ github.repository }}.git .
          fi
          
          echo "Создание .env файла..."
          cat > infra/.env << EOF
          # Django settings
          DEBUG=False
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DJANGO_SETTINGS_MODULE=foodgram.settings.production
          ALLOWED_HOSTS=${{ env.DOMAIN }},${{ env.PROD_HOST }},localhost,127.0.0.1
          
          # Database
          POSTGRES_DB=foodgram
          POSTGRES_USER=foodgram_user
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          DB_HOST=db
          DB_PORT=5432
          
          # Redis
          REDIS_HOST=redis
          REDIS_PORT=6379
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          
          # MinIO
          MINIO_ACCESS_KEY=${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY=${{ secrets.MINIO_SECRET_KEY }}
          MINIO_BUCKET_NAME=foodgram
          MINIO_USE_HTTPS=False
          MINIO_HOST=minio
          
          # Email
          EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
          DEFAULT_FROM_EMAIL=noreply@${{ env.DOMAIN }}
          
          # Security для HTTPS
          SECURE_SSL_REDIRECT=True
          SESSION_COOKIE_SECURE=True
          CSRF_COOKIE_SECURE=True
          
          # Domain
          DOMAIN_NAME=${{ env.DOMAIN }}
          EOF
          
          echo "Остановка старых контейнеров..."
          docker-compose -f infra/docker-compose.yml down --remove-orphans || true
          
          echo "Очистка старых образов..."
          docker system prune -f || true
          
          echo "Сборка и запуск новых контейнеров..."
          docker-compose -f infra/docker-compose.yml up -d --build
          
          echo "Ожидание запуска сервисов..."
          sleep 60
          
          echo "Проверка состояния сервисов..."
          docker-compose -f infra/docker-compose.yml ps
          
          echo "Создание администратора..."
          docker-compose -f infra/docker-compose.yml exec -T backend python manage.py shell -c "
          from django.contrib.auth import get_user_model
          User = get_user_model()
          if not User.objects.filter(email='admin@${{ env.DOMAIN }}').exists():
              User.objects.create_superuser(
                  email='admin@${{ env.DOMAIN }}',
                  password='${{ secrets.ADMIN_PASSWORD }}',
                  username='admin',
                  first_name='Admin',
                  last_name='User'
              )
              print('Superuser created')
          else:
              print('Superuser already exists')
          " || true
          
          echo "Загрузка ингредиентов..."
          docker-compose -f infra/docker-compose.yml exec -T backend python manage.py load_ingredients || true
          
          echo "Создание тестовых данных..."
          docker-compose -f infra/docker-compose.yml exec -T backend python manage.py create_test_data || true
          
          echo "Проверка работоспособности..."
          sleep 10
          curl -f http://localhost/api/ || echo "API будет доступен через несколько минут"
          
          echo "🎉 Деплой завершен успешно!"
          echo "🌐 Сайт: https://${{ env.DOMAIN }}"
          echo "🔧 Админка: https://${{ env.DOMAIN }}/admin/"
          echo "📡 API: https://${{ env.DOMAIN }}/api/" 