# üèÜ Cursor AI Rules –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Foodgram

## üìã –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã
- **–Ø–∑—ã–∫**: –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- **–°—Ç–∏–ª—å –∫–æ–¥–∞**: –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—é PEP8
- **–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤**: –û–¥–∏–Ω —Ñ–∞–π–ª ‚â§ 500 —Å—Ç—Ä–æ–∫. –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ ‚Äî —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ø–æ –º–æ–¥—É–ª—è–º
- **–¢–µ—Å—Ç—ã**: –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è ‚Äî —Å—Ä–∞–∑—É, –Ω–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å
- **–°–µ–∫—Ä–µ—Ç—ã**: API-–∫–ª—é—á–∏ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –Ω–∏–∫–æ–≥–¥–∞ –≤ –∫–æ–¥–µ

## üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫
**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏:**
- Django 3.2.16 + Django REST Framework 3.12.4
- FastAPI (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
- PostgreSQL

## üîß –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

### –¢–µ—Ä–º–∏–Ω–∞–ª –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
- –ü–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π `edit_file` –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤

- –ú–æ–¥–µ–ª–∏ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ë–î

### –ò–º–ø–æ—Ä—Ç—ã (PEP8)
```python
# –°—Ç—Ä–æ–≥–æ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ:
# 1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import os
from datetime import datetime

# 2. –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from django.db import models
from rest_framework import serializers

# 3. –ú–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
from apps.users.models import User
from .constants import MAX_LENGTH
```

### –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –º–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞
```python
# ‚úÖ –í—Å–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤ constants.py
MAX_NAME_LENGTH = 200
MIN_COOKING_TIME = 1
COMMENTS_LIMIT = 10

# ‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –º–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞ –≤ –∫–æ–¥–µ
```

### –ú–æ–¥–µ–ª–∏ Django
```python
# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏
class Recipe(models.Model):
    name = models.CharField(max_length=MAX_NAME_LENGTH, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ')
    cooking_time = models.PositiveIntegerField(
        verbose_name='–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è',
        validators=[MinValueValidator(MIN_COOKING_TIME)]
    )
    
    class Meta:
        verbose_name = '–†–µ—Ü–µ–ø—Ç'
        verbose_name_plural = '–†–µ—Ü–µ–ø—Ç—ã'
        ordering = ['-pub_date']
    
    def __str__(self):
        return self.name
```

### –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
```python
# ‚úÖ –í—ã–Ω–æ—Å–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–æ–ª—è –≤ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—É—é –º–æ–¥–µ–ª—å
class TimeStampedPublishedModel(models.Model):
    created_at = models.DateTimeField(auto_now_add=True)
    is_published = models.BooleanField(default=False)
    
    class Meta:
        abstract = True
```

### QuerySet –∏ Manager
```python
# ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π –∫–∞—Å—Ç–æ–º–Ω—ã–µ QuerySet
class RecipeQuerySet(models.QuerySet):
    def published(self):
        return self.filter(is_published=True)
    
    def by_author(self, author):
        return self.filter(author=author)

class Recipe(models.Model):
    objects = RecipeQuerySet.as_manager()
```

### –ê–¥–º–∏–Ω–∫–∞ Django
```python
# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å @admin.register
@admin.register(Recipe)
class RecipeAdmin(admin.ModelAdmin):
    list_display = ['name', 'author', 'cooking_time', 'favorites_count']
    list_filter = ['tags', 'pub_date']
    search_fields = ['name', 'text']
    
    @admin.display(description='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º')
    def favorites_count(self, obj):
        return obj.favorited_by.count()

# –î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–æ–¥–µ–ª–∏ User
@admin.register(User)
class CustomUserAdmin(UserAdmin):
    list_display = ['email', 'username', 'first_name', 'last_name', 'is_staff']
    search_fields = ['email', 'username']
    ordering = ['email']

# –£–¥–∞–ª—è–π –Ω–µ–Ω—É–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏
from django.contrib.auth.models import Group
admin.site.unregister(Group)
```

### –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
```python
# ‚úÖ –ù–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–π create() –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
class RecipeSerializer(serializers.ModelSerializer):
    tags = serializers.PrimaryKeyRelatedField(
        queryset=Tag.objects.all(),
        many=True
    )
    author = serializers.PrimaryKeyRelatedField(read_only=True)
    
    class Meta:
        model = Recipe
        fields = '__all__'
        validators = [
            UniqueTogetherValidator(
                queryset=Recipe.objects.all(),
                fields=['author', 'name']
            )
        ]
    
    def validate_cooking_time(self, value):
        if value < 1:
            raise serializers.ValidationError(
                '–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'
            )
        return value
    
    # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π to_representation() –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    def to_representation(self, instance):
        representation = super().to_representation(instance)
        representation['favorites_count'] = instance.favorited_by.count()
        return representation

# ‚ùå –ü—É—Å—Ç—ã–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã .save() –±–µ–∑ –ª–æ–≥–∏–∫–∏ ‚Äî –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã
```

### ViewSets –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
```python
# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ViewSet
class RecipeViewSet(viewsets.ModelViewSet):
    serializer_class = RecipeSerializer
    permission_classes = [IsAuthenticated, IsOwnerOrReadOnly]
    filter_backends = [DjangoFilterBackend]
    filterset_class = RecipeFilter
    
    def get_queryset(self):
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å—ã —Å select_related –∏ prefetch_related
        return Recipe.objects.select_related('author').prefetch_related(
            'ingredients', 'tags'
        ).annotate(
            favorites_count=Count('favorited_by'),
            is_favorited=Exists(
                Favorite.objects.filter(
                    user=self.request.user,
                    recipe=OuterRef('pk')
                )
            )
        )

# ‚ùå –ò—Å–ø–æ–ª—å–∑—É–π annotate() –≤–º–µ—Å—Ç–æ SerializerMethodField –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è N+1 queries
```

### Permissions
```python
# ‚úÖ –í—Å–µ permissions –≤ permissions.py
class IsOwnerOrReadOnly(permissions.BasePermission):
    """–ù–ï –≤–∫–ª—é—á–∞–µ—Ç is_authenticated - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ."""
    def has_object_permission(self, request, view, obj):
        return (
            request.method in permissions.SAFE_METHODS
            or obj.author == request.user
        )

# ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π permissions –æ—Ç–¥–µ–ª—å–Ω–æ
class RecipeViewSet(viewsets.ModelViewSet):
    permission_classes = [IsAuthenticated, IsOwnerOrReadOnly]
```

### –§–∏–ª—å—Ç—Ä—ã
```python
# ‚úÖ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ filters.py
class RecipeFilter(django_filters.FilterSet):
    is_favorited = django_filters.BooleanFilter(
        method='filter_is_favorited'
    )
    tags = django_filters.ModelMultipleChoiceFilter(
        field_name='tags__slug',
        to_field_name='slug',
        queryset=Tag.objects.all()
    )
    
    def filter_is_favorited(self, queryset, name, value):
        if self.request.user.is_authenticated and value:
            return queryset.filter(favorited_by=self.request.user)
        return queryset
    
    class Meta:
        model = Recipe
        fields = ['author', 'tags']
```

### –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (pytest)
```python
# ‚úÖ –§–∏–∫—Å—Ç—É—Ä—ã –≤ conftest.py
@pytest.fixture(autouse=True)
def enable_db_access(db):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Å—Ç—É–ø –∫ –ë–î –≤–æ –≤—Å–µ—Ö —Ç–µ—Å—Ç–∞—Ö."""
    pass

@pytest.fixture
def api_client():
    return APIClient()

# ‚úÖ –í—Å–µ reverse() –∫–∞–∫ —Ñ–∏–∫—Å—Ç—É—Ä—ã
@pytest.fixture  
def recipe_url():
    return reverse('recipe-list')

# ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π @pytest.mark.parametrize –≤–µ–∑–¥–µ —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –¥–∞–Ω–Ω—ã–º–∏
@pytest.mark.parametrize(
    'cooking_time,expected_status',
    [
        (0, 400),      # –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        (1, 201),      # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ
        (60, 201),     # –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        (-5, 400),     # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ
    ]
)
def test_recipe_cooking_time_validation(api_client, user, cooking_time, expected_status):
    # —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏

# ‚úÖ Bulk —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@pytest.fixture
def many_recipes():
    recipes = []
    for i in range(RECIPES_LIMIT):
        recipes.append(Recipe(
            name=f'Recipe {i}',
            cooking_time=30,
            pub_date=timezone.now() - timedelta(days=i)
        ))
    return Recipe.objects.bulk_create(recipes)

# ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π constants.py –¥–∞–∂–µ –≤ —Ç–µ—Å—Ç–∞—Ö
```

### –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è UnitTest
```python
# ‚úÖ BaseTestCase –≤ common.py
class BaseTestCase(TestCase):
    @classmethod
    def setUpTestData(cls):
        cls.user = User.objects.create_user(
            email='test@example.com',
            password='testpass123'
        )
        cls.recipe_url = reverse('recipe-list')
    
    def authenticate_user(self):
        self.client.force_authenticate(user=self.user)
```

### API —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
```python
# ‚úÖ –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ API
urlpatterns = [
    path('api/v1/', include('api.v1.urls')),
]

# ‚úÖ ViewSet —Å –±–∞–∑–æ–≤—ã–º –∫–ª–∞—Å—Å–æ–º –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∂–∞–Ω—Ä–æ–≤
class BaseListViewSet(
    mixins.ListModelMixin,
    mixins.CreateModelMixin,
    mixins.DestroyModelMixin,
    viewsets.GenericViewSet
):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∂–∞–Ω—Ä–æ–≤."""
    pass
```

### –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
```python
# ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
SECRET_KEY = os.environ.get('SECRET_KEY')
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

# ‚ùå –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ö–∞—Ä–¥–∫–æ–¥—å —Å–µ–∫—Ä–µ—Ç—ã
```

### –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
```python
# ‚úÖ –ù–µ –ª–æ–≥–∏—Ä—É–π –æ—à–∏–±–∫–∏ –≤ –Ω–∏–∂–Ω–µ–º —É—Ä–æ–≤–Ω–µ ‚Äî –ø—Ä–æ–∫–∏–¥—ã–≤–∞–π –Ω–∞–≤–µ—Ä—Ö
def low_level_function():
    try:
        # –ª–æ–≥–∏–∫–∞
        pass
    except DatabaseError:
        # –ù–ï –ª–æ–≥–∏—Ä—É–µ–º –∑–¥–µ—Å—å, –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –≤—ã—à–µ
        raise

def high_level_function():
    try:
        low_level_function()
    except DatabaseError as e:
        logger.error(f"Database error: {e}")
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
```

### –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
```python
# ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π –∫–∞–≤—ã—á–∫–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤–æ –≤—Å—ë–º –ø—Ä–æ–µ–∫—Ç–µ
GOOD_STRING = '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤–µ–∑–¥–µ'

# ‚úÖ –£–¥–∞–ª—è–π –ø—É—Å—Ç—ã–µ –∫–ª–∞—Å—Å—ã/–º–µ—Ç–æ–¥—ã –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–π docstring
class EmptyView:
    """–ü—É—Å—Ç–æ–π view –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏."""
    pass

# ‚úÖ –í—Å–µ –æ—à–∏–±–∫–∏ ‚Äî —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
def validate_data(data):
    if not isinstance(data, dict):
        raise TypeError("Data must be a dictionary")
    if 'name' not in data:
        raise ValidationError("Name is required")
```

### Requirements —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
```
requirements/
‚îú‚îÄ‚îÄ base.txt          # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
‚îú‚îÄ‚îÄ development.txt   # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
‚îî‚îÄ‚îÄ production.txt    # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
```

### Settings —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
```
settings/
‚îú‚îÄ‚îÄ __init__.py
‚îú‚îÄ‚îÄ base.py           # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚îú‚îÄ‚îÄ development.py    # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
‚îú‚îÄ‚îÄ production.py     # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
‚îî‚îÄ‚îÄ testing.py        # –î–ª—è —Ç–µ—Å—Ç–æ–≤
```

### Docker
```dockerfile
# ‚úÖ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
FROM python:3.8-slim

RUN useradd --create-home --shell /bin/bash app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . /app
WORKDIR /app
USER app
```

### README.md –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
```markdown
# –ü—Ä–æ–µ–∫—Ç Foodgram

## üìñ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
## üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫
## üì° –ü—Ä–∏–º–µ—Ä—ã API-–∑–∞–ø—Ä–æ—Å–æ–≤
## üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏
## üìÑ –õ–∏—Ü–µ–Ω–∑–∏—è
```

## üö´ –ß—Ç–æ –ù–ï –¥–µ–ª–∞—Ç—å
- –ù–ï –ø—Ä–∞–≤–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é
- –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞
- –ù–ï —Ö–∞—Ä–¥–∫–æ–¥–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã
- –ù–ï —Å–æ–∑–¥–∞–≤–∞—Ç—å N+1 queries
- –ù–ï –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ –Ω–∏–∂–Ω–µ–º —É—Ä–æ–≤–Ω–µ
- –ù–ï —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –ª–æ–≥–∏–∫–∏
- –ù–ï –∑–∞–ø—É—Å–∫–∞—Ç—å Docker –æ—Ç root
- –ù–ï –≤–∫–ª—é—á–∞—Ç—å is_authenticated –≤ IsAdminOrReadOnly/IsOwnerOrReadOnly

## üéØ –¶–µ–ª—å
–°–æ–∑–¥–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç Foodgram —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ Django –∏ Python —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. 