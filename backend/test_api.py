#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints Foodgram.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ API —Å–æ–≥–ª–∞—Å–Ω–æ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏.
"""
import json
import requests
import sys
from typing import Dict, Any

API_BASE_URL = "http://localhost:8000/api"

def make_request(method: str, endpoint: str, data: Dict[Any, Any] = None, 
                headers: Dict[str, str] = None) -> requests.Response:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ API."""
    url = f"{API_BASE_URL}{endpoint}"
    
    if headers is None:
        headers = {"Content-Type": "application/json"}
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers)
        elif method.upper() == "POST":
            response = requests.post(url, json=data, headers=headers)
        elif method.upper() == "PUT":
            response = requests.put(url, json=data, headers=headers)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: {method}")
        
        return response
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Django —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
        sys.exit(1)

def test_public_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–µ endpoints."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö endpoints...")
    
    # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ —Ç–µ–≥–æ–≤
    print("  üìã –¢–µ—Å—Ç–∏—Ä—É—é /api/tags/")
    response = make_request("GET", "/tags/")
    if response.status_code == 200:
        tags = response.json()
        print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–≥–æ–≤: {len(tags)}")
    else:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    
    # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    print("  ü•ï –¢–µ—Å—Ç–∏—Ä—É—é /api/ingredients/")
    response = make_request("GET", "/ingredients/")
    if response.status_code == 200:
        ingredients = response.json()
        print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {len(ingredients)}")
    else:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    print("  üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ø–æ '–º—É–∫'")
    response = make_request("GET", "/ingredients/?name=–º—É–∫")
    if response.status_code == 200:
        ingredients = response.json()
        print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {len(ingredients)}")
        if ingredients:
            print(f"    üìÑ –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {ingredients[0]['name']}")
    else:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    
    # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    print("  üç≥ –¢–µ—Å—Ç–∏—Ä—É—é /api/recipes/")
    response = make_request("GET", "/recipes/")
    if response.status_code == 200:
        recipes_data = response.json()
        print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {recipes_data.get('count', 0)}")
    else:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    
    # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("  üë• –¢–µ—Å—Ç–∏—Ä—É—é /api/users/")
    response = make_request("GET", "/users/")
    if response.status_code == 200:
        users_data = response.json()
        print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_data.get('count', 0)}")
    else:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")

def test_user_registration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    user_data = {
        "email": "testuser@foodgram.com",
        "username": "testuser",
        "first_name": "Test",
        "last_name": "User",
        "password": "testpass123"
    }
    
    response = make_request("POST", "/users/", user_data)
    if response.status_code == 201:
        user = response.json()
        print(f"    ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user['email']}")
        return user
    elif response.status_code == 400:
        error = response.json()
        if "email" in error and "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in str(error.get("email", "")):
            print("    ‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return {"email": user_data["email"]}
        else:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error}")
            return None
    else:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}")
        return None

def test_authentication():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é."""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    # –°–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    test_user = test_user_registration()
    if not test_user:
        print("    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return None
    
    # –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
    login_data = {
        "email": "testuser@foodgram.com",
        "password": "testpass123"
    }
    
    response = make_request("POST", "/auth/token/login/", login_data)
    if response.status_code == 200:
        token_data = response.json()
        token = token_data.get("auth_token")
        print("    ‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        return token
    else:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
        print(f"    üìÑ –û—Ç–≤–µ—Ç: {response.text}")
        return None

def test_authenticated_endpoints(token: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoints, —Ç—Ä–µ–±—É—é—â–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    if not token:
        print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö endpoints")
        return
    
    print("\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö endpoints...")
    
    headers = {
        "Authorization": f"Token {token}",
        "Content-Type": "application/json"
    }
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("  üë§ –¢–µ—Å—Ç–∏—Ä—É—é /api/users/me/")
    response = make_request("GET", "/users/me/", headers=headers)
    if response.status_code == 200:
        user = response.json()
        print(f"    ‚úÖ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['email']}")
    else:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    
    # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    print("  üìã –¢–µ—Å—Ç–∏—Ä—É—é /api/users/subscriptions/")
    response = make_request("GET", "/users/subscriptions/", headers=headers)
    if response.status_code == 200:
        subscriptions = response.json()
        print(f"    ‚úÖ –ü–æ–¥–ø–∏—Å–æ–∫: {subscriptions.get('count', 0)}")
    else:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API Foodgram")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö endpoints
    test_public_endpoints()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    token = test_authentication()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö endpoints
    test_authenticated_endpoints(token)
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("  ‚Ä¢ –ü—É–±–ª–∏—á–Ω—ã–µ endpoints: —Ä–∞–±–æ—Ç–∞—é—Ç")
    print("  ‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("  ‚Ä¢ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("  ‚Ä¢ –ó–∞—â–∏—â—ë–Ω–Ω—ã–µ endpoints: —Ä–∞–±–æ—Ç–∞—é—Ç")
    print("\nüéâ API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

if __name__ == "__main__":
    main() 