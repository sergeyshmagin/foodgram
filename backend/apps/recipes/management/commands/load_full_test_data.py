"""Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
import random
from io import BytesIO

from django.contrib.auth import get_user_model
from django.core.files.base import ContentFile
from django.core.management.base import BaseCommand
from django.db import transaction
try:
    from PIL import Image
except ImportError:
    Image = None

from apps.recipes.models import (Ingredient, IngredientInRecipe, Recipe, Tag,
                                 Favorite, ShoppingCart, Subscription)

User = get_user_model()


class Command(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""

    help = "–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: –∞–¥–º–∏–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Ç–µ–≥–∏, —Ä–µ—Ü–µ–ø—Ç—ã"

    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
        parser.add_argument(
            "--clear",
            action="store_true",
            help="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π",
        )
        parser.add_argument(
            "--admin-only",
            action="store_true",
            help="–°–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        )

    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã."""
        self.stdout.write(
            self.style.SUCCESS("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Foodgram")
        )

        if options["clear"]:
            self.clear_data()

        if options["admin_only"]:
            self.create_admin()
            return

        with transaction.atomic():
            self.create_admin()
            self.create_tags()
            self.create_users()
            self.create_ingredients()
            self.create_recipes()
            self.create_interactions()

        self.stdout.write(
            self.style.SUCCESS("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        )
        self.print_summary()

    def clear_data(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ."""
        self.stdout.write(self.style.WARNING("üßπ –û—á–∏—â–∞—é –¥–∞–Ω–Ω—ã–µ..."))
        
        # –û—á–∏—â–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        Subscription.objects.all().delete()
        ShoppingCart.objects.all().delete()
        Favorite.objects.all().delete()
        IngredientInRecipe.objects.all().delete()
        Recipe.objects.all().delete()
        Tag.objects.all().delete()
        User.objects.all().delete()
        
        self.stdout.write("  ‚úì –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

    def create_admin(self):
        """–°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        self.stdout.write("üë§ –°–æ–∑–¥–∞—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        
        admin, created = User.objects.get_or_create(
            email="admin@foodgram.ru",
            defaults={
                "username": "admin",
                "first_name": "–ê–¥–º–∏–Ω",
                "last_name": "–ê–¥–º–∏–Ω–æ–≤",
                "is_staff": True,
                "is_superuser": True,
            }
        )
        
        if created:
            admin.set_password("admin123")
            admin.save()
            self.stdout.write("  ‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
            self.stdout.write(f"     Email: {admin.email}")
            self.stdout.write(f"     –ü–∞—Ä–æ–ª—å: admin123")
        else:
            self.stdout.write("  ‚ÑπÔ∏è  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    def create_tags(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–≥–∏."""
        self.stdout.write("üè∑Ô∏è  –°–æ–∑–¥–∞—é —Ç–µ–≥–∏...")
        
        tags_data = [
            {"name": "–ó–∞–≤—Ç—Ä–∞–∫", "color": "#E26C2D", "slug": "breakfast"},
            {"name": "–û–±–µ–¥", "color": "#49B64E", "slug": "lunch"},
            {"name": "–£–∂–∏–Ω", "color": "#8775D2", "slug": "dinner"},
            {"name": "–î–µ—Å–µ—Ä—Ç", "color": "#F44336", "slug": "dessert"},
            {"name": "–ë—ã—Å—Ç—Ä–æ", "color": "#FF9800", "slug": "fast"},
            {"name": "–ó–¥–æ—Ä–æ–≤–æ–µ", "color": "#4CAF50", "slug": "healthy"},
            {"name": "–í–µ–≥–∞–Ω—Å–∫–æ–µ", "color": "#2196F3", "slug": "vegan"},
            {"name": "–ü—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ", "color": "#9C27B0", "slug": "holiday"},
        ]

        for tag_data in tags_data:
            tag, created = Tag.objects.get_or_create(
                slug=tag_data["slug"], 
                defaults=tag_data
            )
            status = "‚úÖ" if created else "‚ÑπÔ∏è"
            self.stdout.write(f"  {status} {tag.name}")

    def create_users(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        self.stdout.write("üë• –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        users_data = [
            {
                "email": "chef@foodgram.ru",
                "username": "chef_master",
                "first_name": "–®–µ—Ñ",
                "last_name": "–ü–æ–≤–∞—Ä–æ–≤",
                "password": "testpass123",
            },
            {
                "email": "maria@foodgram.ru", 
                "username": "maria_cook",
                "first_name": "–ú–∞—Ä–∏—è",
                "last_name": "–ö—É–ª–∏–Ω–∞—Ä–æ–≤–∞",
                "password": "testpass123",
            },
            {
                "email": "ivan@foodgram.ru",
                "username": "ivan_food",
                "first_name": "–ò–≤–∞–Ω",
                "last_name": "–ì—É—Ä–º–∞–Ω–æ–≤",
                "password": "testpass123",
            },
            {
                "email": "anna@foodgram.ru",
                "username": "anna_baker",
                "first_name": "–ê–Ω–Ω–∞",
                "last_name": "–ü–µ–∫–∞—Ä–µ–≤–∞",
                "password": "testpass123",
            },
            {
                "email": "test@foodgram.ru",
                "username": "testuser",
                "first_name": "–¢–µ—Å—Ç",
                "last_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "password": "testpass123",
            },
        ]

        for user_data in users_data:
            user, created = User.objects.get_or_create(
                email=user_data["email"],
                defaults={
                    "username": user_data["username"],
                    "first_name": user_data["first_name"],
                    "last_name": user_data["last_name"],
                }
            )
            if created:
                user.set_password(user_data["password"])
                user.save()
                self.stdout.write(f"  ‚úÖ {user.username} ({user.email})")
            else:
                self.stdout.write(f"  ‚ÑπÔ∏è  {user.username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    def create_ingredients(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã."""
        self.stdout.write("ü•ï –°–æ–∑–¥–∞—é –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã...")
        
        ingredients_data = [
            ("–ú—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è", "–≥"),
            ("–°–∞—Ö–∞—Ä", "–≥"),
            ("–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ", "—à—Ç"),
            ("–ú–æ–ª–æ–∫–æ", "–º–ª"),
            ("–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ", "–≥"),
            ("–°–æ–ª—å", "–≥"),
            ("–ü–æ–º–∏–¥–æ—Ä—ã", "—à—Ç"),
            ("–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π", "—à—Ç"),
            ("–ú–æ—Ä–∫–æ–≤—å", "—à—Ç"),
            ("–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", "—à—Ç"),
            ("–ì–æ–≤—è–¥–∏–Ω–∞", "–≥"),
            ("–°–≤–∏–Ω–∏–Ω–∞", "–≥"),
            ("–ö—É—Ä–∏—Ü–∞", "–≥"),
            ("–†–∏—Å", "–≥"),
            ("–ú–∞–∫–∞—Ä–æ–Ω—ã", "–≥"),
            ("–°—ã—Ä —Ç–≤–µ—Ä–¥—ã–π", "–≥"),
            ("–ß–µ—Å–Ω–æ–∫", "–∑—É–±—á–∏–∫"),
            ("–ü–µ—Ä–µ—Ü —á–µ—Ä–Ω—ã–π", "–≥"),
            ("–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –º–∞—Å–ª–æ", "–º–ª"),
            ("–°–º–µ—Ç–∞–Ω–∞", "–≥"),
            ("–û–≥—É—Ä—Ü—ã", "—à—Ç"),
            ("–ö–∞–ø—É—Å—Ç–∞", "–≥"),
            ("–°–≤–µ–∫–ª–∞", "—à—Ç"),
            ("–ó–µ–ª–µ–Ω—å", "–≥"),
            ("–ú–µ–¥", "–≥"),
        ]
        
        for name, unit in ingredients_data:
            ingredient, created = Ingredient.objects.get_or_create(
                name=name, 
                measurement_unit=unit
            )
            status = "‚úÖ" if created else "‚ÑπÔ∏è"
            self.stdout.write(f"  {status} {name}")

    def create_recipes(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã."""
        self.stdout.write("üç≥ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã...")
        
        users = list(User.objects.filter(is_superuser=False))
        tags = list(Tag.objects.all())
        
        if not users:
            self.stdout.write("  ‚ö†Ô∏è  –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤")
            return
        
        recipes_data = [
            {
                "name": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –±–ª–∏–Ω—á–∏–∫–∏",
                "text": "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –±–ª–∏–Ω—á–∏–∫–∏ –Ω–∞ –º–æ–ª–æ–∫–µ. –ò–¥–µ–∞–ª—å–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫ –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏. –°–º–µ—à–∞–π—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∂–∞—Ä—å—Ç–µ –Ω–∞ —Å–∫–æ–≤–æ—Ä–æ–¥–µ –¥–æ –∑–æ–ª–æ—Ç–∏—Å—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞. –ü–æ–¥–∞–≤–∞—Ç—å —Å –º–µ–¥–æ–º, —Å–º–µ—Ç–∞–Ω–æ–π –∏–ª–∏ –≤–∞—Ä–µ–Ω—å–µ–º.",
                "cooking_time": 30,
                "tags": ["breakfast"],
                "ingredients": [
                    ("–ú—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è", 200),
                    ("–ú–æ–ª–æ–∫–æ", 500),
                    ("–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ", 2),
                    ("–°–∞—Ö–∞—Ä", 50),
                    ("–°–æ–ª—å", 5),
                    ("–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –º–∞—Å–ª–æ", 30),
                ]
            },
            {
                "name": "–ë–æ—Ä—â —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π",
                "text": "–ù–∞–≤–∞—Ä–∏—Å—Ç—ã–π –±–æ—Ä—â —Å –≥–æ–≤—è–¥–∏–Ω–æ–π –∏ —Å–≤–µ–∂–∏–º–∏ –æ–≤–æ—â–∞–º–∏. –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ—Ü–µ–ø—Ç —Å –±–æ–≥–∞—Ç—ã–º –≤–∫—É—Å–æ–º –∏ –∞—Ä–æ–º–∞—Ç–æ–º. –í–∞—Ä–∏—Ç–µ –±—É–ª—å–æ–Ω 1 —á–∞—Å, –¥–æ–±–∞–≤—å—Ç–µ –æ–≤–æ—â–∏, —Ç—É—à–∏—Ç–µ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.",
                "cooking_time": 120,
                "tags": ["lunch", "healthy"],
                "ingredients": [
                    ("–ì–æ–≤—è–¥–∏–Ω–∞", 500),
                    ("–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", 3),
                    ("–ú–æ—Ä–∫–æ–≤—å", 2),
                    ("–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π", 1),
                    ("–ü–æ–º–∏–¥–æ—Ä—ã", 2),
                    ("–°–≤–µ–∫–ª–∞", 1),
                    ("–ö–∞–ø—É—Å—Ç–∞", 200),
                    ("–ó–µ–ª–µ–Ω—å", 50),
                ]
            },
            {
                "name": "–ü–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞",
                "text": "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –ø–∞—Å—Ç–∞ —Å –±–µ–∫–æ–Ω–æ–º, —è–π—Ü–æ–º –∏ —Å—ã—Ä–æ–º –ø–∞—Ä–º–µ–∑–∞–Ω. –ù–µ–∂–Ω–∞—è –∏ —Å–ª–∏–≤–æ—á–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞. –ì–æ—Ç–æ–≤–∏—Ç—Å—è –±—ã—Å—Ç—Ä–æ - –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —É–∂–∏–Ω–∞.",
                "cooking_time": 25,
                "tags": ["dinner", "fast"],
                "ingredients": [
                    ("–ú–∞–∫–∞—Ä–æ–Ω—ã", 300),
                    ("–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ", 2),
                    ("–°—ã—Ä —Ç–≤–µ—Ä–¥—ã–π", 100),
                    ("–°–≤–∏–Ω–∏–Ω–∞", 150),
                    ("–ß–µ—Å–Ω–æ–∫", 2),
                    ("–ü–µ—Ä–µ—Ü —á–µ—Ä–Ω—ã–π", 5),
                ]
            },
            {
                "name": "–®–æ–∫–æ–ª–∞–¥–Ω—ã–π —Ç–æ—Ä—Ç",
                "text": "–í–ª–∞–∂–Ω—ã–π —à–æ–∫–æ–ª–∞–¥–Ω—ã–π —Ç–æ—Ä—Ç —Å –≥–ª–∞–∑—É—Ä—å—é. –ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ—Å–µ—Ä—Ç –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞. –í—ã–ø–µ–∫–∞–π—Ç–µ –≤ –¥—É—Ö–æ–≤–∫–µ –ø—Ä–∏ 180¬∞–°.",
                "cooking_time": 90,
                "tags": ["dessert", "holiday"],
                "ingredients": [
                    ("–ú—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è", 250),
                    ("–°–∞—Ö–∞—Ä", 200),
                    ("–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ", 3),
                    ("–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ", 100),
                    ("–ú–æ–ª–æ–∫–æ", 200),
                ]
            },
            {
                "name": "–û–≤–æ—â–Ω–æ–π —Å–∞–ª–∞—Ç",
                "text": "–°–≤–µ–∂–∏–π —Å–∞–ª–∞—Ç –∏–∑ —Å–µ–∑–æ–Ω–Ω—ã—Ö –æ–≤–æ—â–µ–π —Å —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–º –º–∞—Å–ª–æ–º. –õ–µ–≥–∫–∏–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ª—é–±–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–¥–∞.",
                "cooking_time": 15,
                "tags": ["healthy", "vegan", "fast"],
                "ingredients": [
                    ("–ü–æ–º–∏–¥–æ—Ä—ã", 2),
                    ("–û–≥—É—Ä—Ü—ã", 2),
                    ("–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π", 1),
                    ("–ó–µ–ª–µ–Ω—å", 30),
                    ("–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –º–∞—Å–ª–æ", 20),
                    ("–°–æ–ª—å", 5),
                ]
            },
            {
                "name": "–ü–ª–æ–≤ —É–∑–±–µ–∫—Å–∫–∏–π",
                "text": "–ê—Ä–æ–º–∞—Ç–Ω—ã–π –ø–ª–æ–≤ —Å –±–∞—Ä–∞–Ω–∏–Ω–æ–π –∏ —Å–ø–µ—Ü–∏—è–º–∏. –ì–æ—Ç–æ–≤–∏—Ç—Å—è –≤ –∫–∞–∑–∞–Ω–µ –ø–æ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É. –¢–æ–º–∏—Ç–µ –Ω–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–º –æ–≥–Ω–µ 2 —á–∞—Å–∞.",
                "cooking_time": 180,
                "tags": ["lunch", "dinner"],
                "ingredients": [
                    ("–†–∏—Å", 500),
                    ("–ì–æ–≤—è–¥–∏–Ω–∞", 700),
                    ("–ú–æ—Ä–∫–æ–≤—å", 3),
                    ("–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π", 2),
                    ("–ß–µ—Å–Ω–æ–∫", 1),
                    ("–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –º–∞—Å–ª–æ", 100),
                ]
            },
            {
                "name": "–ö—É—Ä–∏–Ω—ã–µ –∫–æ—Ç–ª–µ—Ç—ã",
                "text": "–°–æ—á–Ω—ã–µ –∫—É—Ä–∏–Ω—ã–µ –∫–æ—Ç–ª–µ—Ç—ã —Å –ª—É–∫–æ–º. –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –±–ª—é–¥–æ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –æ–±–µ–¥–∞ –∏–ª–∏ —É–∂–∏–Ω–∞.",
                "cooking_time": 45,
                "tags": ["lunch", "dinner"],
                "ingredients": [
                    ("–ö—É—Ä–∏—Ü–∞", 500),
                    ("–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π", 1),
                    ("–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ", 1),
                    ("–ú—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è", 50),
                    ("–°–æ–ª—å", 10),
                    ("–ü–µ—Ä–µ—Ü —á–µ—Ä–Ω—ã–π", 5),
                ]
            },
            {
                "name": "–ú–µ–¥–æ–≤—ã–π —Ç–æ—Ä—Ç",
                "text": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–µ–¥–æ–≤—ã–π —Ç–æ—Ä—Ç —Å–æ —Å–º–µ—Ç–∞–Ω–Ω—ã–º –∫—Ä–µ–º–æ–º. –õ—é–±–∏–º—ã–π –¥–µ—Å–µ—Ä—Ç –º–Ω–æ–≥–∏—Ö –ø–æ–∫–æ–ª–µ–Ω–∏–π.",
                "cooking_time": 120,
                "tags": ["dessert", "holiday"],
                "ingredients": [
                    ("–ú—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è", 300),
                    ("–ú–µ–¥", 100),
                    ("–°–∞—Ö–∞—Ä", 150),
                    ("–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ", 2),
                    ("–°–º–µ—Ç–∞–Ω–∞", 400),
                    ("–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ", 50),
                ]
            },
        ]
        
        for recipe_data in recipes_data:
            author = random.choice(users)
            
            recipe, created = Recipe.objects.get_or_create(
                name=recipe_data["name"],
                defaults={
                    "author": author,
                    "text": recipe_data["text"],
                    "cooking_time": recipe_data["cooking_time"],
                    "image": self.create_recipe_image(recipe_data["name"]),
                }
            )
            
            if created:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏
                recipe_tags = [tag for tag in tags if tag.slug in recipe_data["tags"]]
                recipe.tags.set(recipe_tags)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
                for ingredient_name, amount in recipe_data["ingredients"]:
                    try:
                        ingredient = Ingredient.objects.get(name=ingredient_name)
                        IngredientInRecipe.objects.create(
                            recipe=recipe,
                            ingredient=ingredient,
                            amount=amount
                        )
                    except Ingredient.DoesNotExist:
                        self.stdout.write(f"    ‚ö†Ô∏è  –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {ingredient_name}")
                
                self.stdout.write(f"  ‚úÖ {recipe.name} (–∞–≤—Ç–æ—Ä: {author.username})")
            else:
                self.stdout.write(f"  ‚ÑπÔ∏è  {recipe.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    def create_recipe_image(self, recipe_name):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞."""
        if Image is None:
            return None
            
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É
        img = Image.new('RGB', (300, 200), color='lightgray')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
        img_io = BytesIO()
        img.save(img_io, format='JPEG')
        img_io.seek(0)
        
        # –°–æ–∑–¥–∞–µ–º Django File
        filename = f"recipe_{recipe_name.lower().replace(' ', '_')[:20]}.jpg"
        return ContentFile(img_io.getvalue(), name=filename)

    def create_interactions(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: –ø–æ–¥–ø–∏—Å–∫–∏, –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –∫–æ—Ä–∑–∏–Ω—ã."""
        self.stdout.write("‚ù§Ô∏è  –°–æ–∑–¥–∞—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è...")
        
        users = list(User.objects.filter(is_superuser=False))
        recipes = list(Recipe.objects.all())
        
        if len(users) < 2 or not recipes:
            self.stdout.write("  ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
            return
        
        interactions_count = 0
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        for user in users[:3]:
            for author in users[-2:]:
                if user != author:
                    _, created = Subscription.objects.get_or_create(
                        user=user, 
                        author=author
                    )
                    if created:
                        interactions_count += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        for user in users:
            favorite_recipes = random.sample(recipes, min(3, len(recipes)))
            for recipe in favorite_recipes:
                _, created = Favorite.objects.get_or_create(
                    user=user,
                    recipe=recipe
                )
                if created:
                    interactions_count += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
        for user in users[:3]:
            cart_recipes = random.sample(recipes, min(2, len(recipes)))
            for recipe in cart_recipes:
                _, created = ShoppingCart.objects.get_or_create(
                    user=user,
                    recipe=recipe
                )
                if created:
                    interactions_count += 1
        
        self.stdout.write(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ {interactions_count} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")

    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º."""
        self.stdout.write("\nüìä –°–≤–æ–¥–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º:")
        self.stdout.write(f"  üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {User.objects.count()}")
        self.stdout.write(f"  üè∑Ô∏è  –¢–µ–≥–∏: {Tag.objects.count()}")
        self.stdout.write(f"  ü•ï –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {Ingredient.objects.count()}")
        self.stdout.write(f"  üç≥ –†–µ—Ü–µ–ø—Ç—ã: {Recipe.objects.count()}")
        self.stdout.write(f"  ‚ù§Ô∏è  –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: {Favorite.objects.count()}")
        self.stdout.write(f"  üõí –í –∫–æ—Ä–∑–∏–Ω–µ: {ShoppingCart.objects.count()}")
        self.stdout.write(f"  üë• –ü–æ–¥–ø–∏—Å–∫–∏: {Subscription.objects.count()}")
        
        self.stdout.write("\nüîë –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        self.stdout.write("  üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:")
        self.stdout.write("     Email: admin@foodgram.ru")
        self.stdout.write("     –ü–∞—Ä–æ–ª—å: admin123")
        self.stdout.write("  üë§ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        self.stdout.write("     –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö: testpass123")
        self.stdout.write("     ‚Ä¢ chef@foodgram.ru (chef_master)")
        self.stdout.write("     ‚Ä¢ maria@foodgram.ru (maria_cook)")
        self.stdout.write("     ‚Ä¢ ivan@foodgram.ru (ivan_food)")
        self.stdout.write("     ‚Ä¢ anna@foodgram.ru (anna_baker)")
        self.stdout.write("     ‚Ä¢ test@foodgram.ru (testuser)") 