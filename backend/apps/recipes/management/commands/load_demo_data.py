"""Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
import random
from io import BytesIO

from django.contrib.auth import get_user_model
from django.core.files.base import ContentFile
from django.core.management.base import BaseCommand
from django.db import transaction

try:
    from PIL import Image
except ImportError:
    Image = None

from apps.recipes.models import (
    Favorite,
    Ingredient,
    IngredientInRecipe,
    Recipe,
    ShoppingCart,
    Subscription,
    Tag,
)

User = get_user_model()


class Command(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""

    help = "–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"

    def add_arguments(self, parser):
        parser.add_argument(
            "--clear",
            action="store_true",
            help="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π",
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        )

        if options["clear"]:
            self.clear_data()

        with transaction.atomic():
            self.create_admin()
            self.create_tags()
            self.create_users()
            self.create_ingredients()
            self.create_recipes()
            self.create_interactions()

        self.print_summary()

    def clear_data(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ."""
        self.stdout.write("üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        Subscription.objects.all().delete()
        ShoppingCart.objects.all().delete()
        Favorite.objects.all().delete()
        IngredientInRecipe.objects.all().delete()
        Recipe.objects.all().delete()
        Tag.objects.all().delete()
        User.objects.all().delete()

    def create_admin(self):
        """–°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        self.stdout.write("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")

        admin, created = User.objects.get_or_create(
            email="admin@foodgram.ru",
            defaults={
                "username": "admin",
                "first_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "last_name": "Foodgram",
                "is_staff": True,
                "is_superuser": True,
            },
        )

        if created:
            admin.set_password("admin123")
            admin.save()
            self.stdout.write("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        else:
            self.stdout.write("‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    def create_tags(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–≥–∏."""
        self.stdout.write("üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–æ–≤...")

        tags_data = [
            {"name": "–ó–∞–≤—Ç—Ä–∞–∫", "color": "#E26C2D", "slug": "breakfast"},
            {"name": "–û–±–µ–¥", "color": "#49B64E", "slug": "lunch"},
            {"name": "–£–∂–∏–Ω", "color": "#8775D2", "slug": "dinner"},
            {"name": "–î–µ—Å–µ—Ä—Ç", "color": "#F44336", "slug": "dessert"},
            {"name": "–ë—ã—Å—Ç—Ä–æ", "color": "#FF9800", "slug": "fast"},
            {"name": "–ó–¥–æ—Ä–æ–≤–æ–µ", "color": "#4CAF50", "slug": "healthy"},
        ]

        for tag_data in tags_data:
            tag, created = Tag.objects.get_or_create(
                slug=tag_data["slug"], defaults=tag_data
            )
            status = "‚úÖ" if created else "‚ÑπÔ∏è"
            self.stdout.write(f"{status} {tag.name}")

    def create_users(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        self.stdout.write("üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        users_data = [
            {
                "email": "chef@foodgram.ru",
                "username": "chef_master",
                "first_name": "–®–µ—Ñ",
                "last_name": "–ü–æ–≤–∞—Ä–æ–≤",
            },
            {
                "email": "maria@foodgram.ru",
                "username": "maria_cook",
                "first_name": "–ú–∞—Ä–∏—è",
                "last_name": "–ö—É–ª–∏–Ω–∞—Ä–æ–≤–∞",
            },
            {
                "email": "test@foodgram.ru",
                "username": "testuser",
                "first_name": "–¢–µ—Å—Ç",
                "last_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            },
        ]

        for user_data in users_data:
            user, created = User.objects.get_or_create(
                email=user_data["email"], defaults=user_data
            )
            if created:
                user.set_password("testpass123")
                user.save()
                self.stdout.write(f"‚úÖ {user.username}")

    def create_ingredients(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
        self.stdout.write("ü•ï –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤...")

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –¥–µ–º–æ-—Ä–µ—Ü–µ–ø—Ç–æ–≤
        required_ingredients = [
            ("–º—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è", "–≥"),
            ("—Å–∞—Ö–∞—Ä", "–≥"),
            ("—è–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ", "—à—Ç"),
            ("–º–æ–ª–æ–∫–æ", "–º–ª"),
            ("–º–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ", "–≥"),
            ("—Å–æ–ª—å", "–≥"),
            ("–ø–æ–º–∏–¥–æ—Ä—ã", "—à—Ç"),
            ("–ª—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π", "—à—Ç"),
            ("–º–æ—Ä–∫–æ–≤—å", "—à—Ç"),
            ("–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å", "—à—Ç"),
            ("–≥–æ–≤—è–¥–∏–Ω–∞", "–≥"),
            ("–∫—É—Ä–∏—Ü–∞", "–≥"),
        ]

        for name, unit in required_ingredients:
            ingredient, created = Ingredient.objects.get_or_create(
                name=name, measurement_unit=unit
            )
            status = "‚úÖ" if created else "‚ÑπÔ∏è"
            self.stdout.write(f"{status} {name}")

        total_count = Ingredient.objects.count()
        self.stdout.write(f"üìä –í—Å–µ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {total_count}")

    def create_recipes(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã."""
        self.stdout.write("üç≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤...")

        users = list(User.objects.filter(is_superuser=False))
        tags = list(Tag.objects.all())

        if not users:
            self.stdout.write("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤")
            return

        recipes_data = [
            {
                "name": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –±–ª–∏–Ω—á–∏–∫–∏",
                "text": (
                    "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –±–ª–∏–Ω—á–∏–∫–∏ –Ω–∞ –º–æ–ª–æ–∫–µ. "
                    "–ò–¥–µ–∞–ª—å–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫ –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏."
                ),
                "cooking_time": 30,
                "tags": ["breakfast"],
                "ingredients": [
                    ("–ú—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è", 200),
                    ("–ú–æ–ª–æ–∫–æ", 500),
                    ("–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ", 2),
                    ("–°–∞—Ö–∞—Ä", 50),
                ],
            },
            {
                "name": "–ë–æ—Ä—â —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π",
                "text": (
                    "–ù–∞–≤–∞—Ä–∏—Å—Ç—ã–π –±–æ—Ä—â —Å –≥–æ–≤—è–¥–∏–Ω–æ–π –∏ –æ–≤–æ—â–∞–º–∏. "
                    "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ—Ü–µ–ø—Ç —Å –±–æ–≥–∞—Ç—ã–º –≤–∫—É—Å–æ–º."
                ),
                "cooking_time": 120,
                "tags": ["lunch", "healthy"],
                "ingredients": [
                    ("–ì–æ–≤—è–¥–∏–Ω–∞", 500),
                    ("–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", 3),
                    ("–ú–æ—Ä–∫–æ–≤—å", 2),
                    ("–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π", 1),
                    ("–ü–æ–º–∏–¥–æ—Ä—ã", 2),
                ],
            },
            {
                "name": "–ö—É—Ä–∏–Ω—ã–µ –∫–æ—Ç–ª–µ—Ç—ã",
                "text": (
                    "–°–æ—á–Ω—ã–µ –∫—É—Ä–∏–Ω—ã–µ –∫–æ—Ç–ª–µ—Ç—ã —Å –ª—É–∫–æ–º. "
                    "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –±–ª—é–¥–æ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –æ–±–µ–¥–∞."
                ),
                "cooking_time": 45,
                "tags": ["lunch", "dinner"],
                "ingredients": [
                    ("–ö—É—Ä–∏—Ü–∞", 500),
                    ("–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π", 1),
                    ("–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ", 1),
                    ("–ú—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è", 50),
                ],
            },
        ]

        for recipe_data in recipes_data:
            author = random.choice(users)

            recipe, created = Recipe.objects.get_or_create(
                name=recipe_data["name"],
                defaults={
                    "author": author,
                    "text": recipe_data["text"],
                    "cooking_time": recipe_data["cooking_time"],
                    "image": self.create_recipe_image(recipe_data["name"]),
                },
            )

            if created:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏
                recipe_tags = [
                    tag for tag in tags if tag.slug in recipe_data["tags"]
                ]
                recipe.tags.set(recipe_tags)

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
                for ingredient_name, amount in recipe_data["ingredients"]:
                    try:
                        # –ò—â–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –ø–æ —Ç–æ—á–Ω–æ–º—É –∏–º–µ–Ω–∏ –∏–ª–∏ –ø–æ—Ö–æ–∂–µ–º—É
                        ingredient = Ingredient.objects.filter(
                            name__iexact=ingredient_name
                        ).first()

                        if not ingredient:
                            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
                            ingredient = Ingredient.objects.filter(
                                name__icontains=ingredient_name.lower()
                            ).first()

                        if ingredient:
                            IngredientInRecipe.objects.create(
                                recipe=recipe,
                                ingredient=ingredient,
                                amount=amount,
                            )
                        else:
                            self.stdout.write(
                                f"‚ö†Ô∏è –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç '{ingredient_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
                            )
                    except Exception as e:
                        self.stdout.write(
                            f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞: {e}"
                        )

                self.stdout.write(f"‚úÖ {recipe.name}")

    def create_recipe_image(self, recipe_name):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞."""
        try:
            if Image is None:
                return None

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É
            img = Image.new("RGB", (300, 200), color="lightgray")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
            img_io = BytesIO()
            img.save(img_io, format="JPEG")
            img_io.seek(0)

            # –°–æ–∑–¥–∞–µ–º Django File
            safe_name = recipe_name.lower().replace(" ", "_")[:20]
            filename = f"recipe_{safe_name}.jpg"
            return ContentFile(img_io.getvalue(), name=filename)
        except Exception as e:
            self.stdout.write(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {recipe_name}: {e}"
            )
            return None

    def create_interactions(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: –ø–æ–¥–ø–∏—Å–∫–∏, –∏–∑–±—Ä–∞–Ω–Ω–æ–µ."""
        self.stdout.write("‚ù§Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π...")

        users = list(User.objects.filter(is_superuser=False))
        recipes = list(Recipe.objects.all())

        if len(users) < 2 or not recipes:
            self.stdout.write("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
            return

        interactions_count = 0

        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        for user in users[:2]:
            for author in users[-1:]:
                if user != author:
                    _, created = Subscription.objects.get_or_create(
                        user=user, author=author
                    )
                    if created:
                        interactions_count += 1

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        for user in users:
            favorite_recipes = random.sample(recipes, min(2, len(recipes)))
            for recipe in favorite_recipes:
                _, created = Favorite.objects.get_or_create(
                    user=user, recipe=recipe
                )
                if created:
                    interactions_count += 1

        self.stdout.write(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {interactions_count} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")

    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º."""
        self.stdout.write("\nüìä –°–≤–æ–¥–∫–∞:")
        self.stdout.write(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {User.objects.count()}")
        self.stdout.write(f"üè∑Ô∏è –¢–µ–≥–∏: {Tag.objects.count()}")
        self.stdout.write(f"ü•ï –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {Ingredient.objects.count()}")
        self.stdout.write(f"üç≥ –†–µ—Ü–µ–ø—Ç—ã: {Recipe.objects.count()}")
        self.stdout.write(f"‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: {Favorite.objects.count()}")
        self.stdout.write(f"üë• –ü–æ–¥–ø–∏—Å–∫–∏: {Subscription.objects.count()}")

        self.stdout.write("\nüîë –î–æ—Å—Ç—É–ø:")
        self.stdout.write("üë®‚Äçüíª –ê–¥–º–∏–Ω: admin@foodgram.ru / admin123")
        self.stdout.write("üë§ –¢–µ—Å—Ç: test@foodgram.ru / testpass123")
