"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MinIO.
"""
import boto3
from botocore.exceptions import ClientError
from django.conf import settings
from django.core.management.base import BaseCommand


class Command(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MinIO –∏ —Å–æ–∑–¥–∞–Ω–∏—è bucket."""
    
    help = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ MinIO –∏ —Å–æ–∑–¥–∞–Ω–∏–µ bucket"
    
    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã."""
        self.stdout.write("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MinIO...")
        
        # –°–æ–∑–¥–∞–µ–º S3 –∫–ª–∏–µ–Ω—Ç –¥–ª—è MinIO
        s3_client = boto3.client(
            's3',
            endpoint_url=settings.AWS_S3_ENDPOINT_URL,
            aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
            aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,
            region_name='us-east-1'  # MinIO —Ç—Ä–µ–±—É–µ—Ç region
        )
        
        bucket_name = settings.AWS_STORAGE_BUCKET_NAME
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ bucket
            s3_client.head_bucket(Bucket=bucket_name)
            self.stdout.write(
                self.style.SUCCESS(f"‚úÖ Bucket '{bucket_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            )
        except ClientError as e:
            error_code = int(e.response['Error']['Code'])
            if error_code == 404:
                # Bucket –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                try:
                    s3_client.create_bucket(Bucket=bucket_name)
                    self.stdout.write(
                        self.style.SUCCESS(
                            f"‚úÖ Bucket '{bucket_name}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
                        )
                    )
                except ClientError as create_error:
                    self.stdout.write(
                        self.style.ERROR(
                            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket: {create_error}"
                        )
                    )
                    return
            else:
                self.stdout.write(
                    self.style.ERROR(
                        f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ bucket: {e}"
                    )
                )
                return
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É
        try:
            bucket_policy = {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": "*",
                        "Action": ["s3:GetObject"],
                        "Resource": [f"arn:aws:s3:::{bucket_name}/*"]
                    }
                ]
            }
            
            import json
            s3_client.put_bucket_policy(
                Bucket=bucket_name,
                Policy=json.dumps(bucket_policy)
            )
            self.stdout.write(
                self.style.SUCCESS(
                    f"‚úÖ –ü—É–±–ª–∏—á–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è bucket '{bucket_name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
                )
            )
        except ClientError as e:
            self.stdout.write(
                self.style.WARNING(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É bucket: {e}"
                )
            )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS
        try:
            cors_configuration = {
                'CORSRules': [
                    {
                        'AllowedOrigins': ['*'],
                        'AllowedMethods': ['GET', 'POST', 'PUT', 'DELETE', 'HEAD'],
                        'AllowedHeaders': ['*'],
                        'ExposeHeaders': ['ETag'],
                        'MaxAgeSeconds': 3000
                    }
                ]
            }
            
            s3_client.put_bucket_cors(
                Bucket=bucket_name,
                CORSConfiguration=cors_configuration
            )
            self.stdout.write(
                self.style.SUCCESS(
                    f"‚úÖ CORS –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è bucket '{bucket_name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
                )
            )
        except ClientError as e:
            self.stdout.write(
                self.style.WARNING(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å CORS –ø–æ–ª–∏—Ç–∏–∫—É: {e}"
                )
            )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        try:
            from django.core.files.storage import default_storage
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å storage
            storage_available = hasattr(default_storage, 'bucket_name')
            if storage_available:
                self.stdout.write(
                    self.style.SUCCESS("‚úÖ Django storage –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MinIO")
                )
            else:
                self.stdout.write(
                    self.style.ERROR("‚ùå Django storage –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MinIO")
                )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è storage: {e}")
            )
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        self.stdout.write("\nüîç –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MinIO:")
        self.stdout.write(f"üìç Endpoint: {settings.AWS_S3_ENDPOINT_URL}")
        self.stdout.write(f"üìÅ Bucket: {settings.AWS_STORAGE_BUCKET_NAME}")
        self.stdout.write(f"üåê Media URL: {settings.MEDIA_URL}")
        self.stdout.write(f"üîó Custom domain: {getattr(settings, 'AWS_S3_CUSTOM_DOMAIN', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
        
        self.stdout.write(
            self.style.SUCCESS("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MinIO –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        ) 