"""Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Foodgram —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
import random
from django.contrib.auth import get_user_model
from django.core.management.base import BaseCommand
from django.db import transaction
from django.conf import settings

from apps.recipes.models import Ingredient, Recipe, Tag

User = get_user_model()


class Command(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Foodgram."""

    help = "–°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"

    def add_arguments(self, parser):
        parser.add_argument(
            "--clear",
            action="store_true",
            help="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Foodgram")
        )

        if options["clear"]:
            self.clear_data()

        with transaction.atomic():
            self.create_admin()
            self.create_tags()
            self.create_users()
            self.create_ingredients()
            self.setup_minio()
            self.create_recipes()

        self.print_summary()

    def clear_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö."""
        self.stdout.write("üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        Recipe.objects.all().delete()
        Tag.objects.all().delete()
        User.objects.all().delete()

    def create_admin(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        self.stdout.write("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")

        admin, created = User.objects.get_or_create(
            email="admin@foodgram.ru",
            defaults={
                "username": "admin",
                "first_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "last_name": "Foodgram",
                "is_staff": True,
                "is_superuser": True,
            }
        )

        if created:
            admin.set_password("admin123")
            admin.save()
            self.stdout.write("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        else:
            self.stdout.write("‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    def create_tags(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–æ–≤."""
        self.stdout.write("üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–æ–≤...")

        tags_data = [
            {"name": "–ó–∞–≤—Ç—Ä–∞–∫", "color": "#E26C2D", "slug": "breakfast"},
            {"name": "–û–±–µ–¥", "color": "#49B64E", "slug": "lunch"},
            {"name": "–£–∂–∏–Ω", "color": "#8775D2", "slug": "dinner"},
            {"name": "–î–µ—Å–µ—Ä—Ç", "color": "#F44336", "slug": "dessert"},
        ]

        for tag_data in tags_data:
            Tag.objects.get_or_create(
                slug=tag_data["slug"],
                defaults=tag_data
            )
            self.stdout.write(f"‚úÖ {tag_data['name']}")

    def create_users(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        self.stdout.write("üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        users_data = [
            {
                "email": "chef@foodgram.ru",
                "username": "chef_master",
                "first_name": "–®–µ—Ñ",
                "last_name": "–ü–æ–≤–∞—Ä–æ–≤",
            },
            {
                "email": "test@foodgram.ru",
                "username": "testuser",
                "first_name": "–¢–µ—Å—Ç",
                "last_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            },
        ]

        for user_data in users_data:
            user, created = User.objects.get_or_create(
                email=user_data["email"],
                defaults=user_data
            )
            if created:
                user.set_password("testpass123")
                user.save()
                self.stdout.write(f"‚úÖ {user.username}")

    def create_ingredients(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤."""
        self.stdout.write("ü•ï –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤...")

        ingredients = [
            ("–ú—É–∫–∞", "–≥"), ("–°–∞—Ö–∞—Ä", "–≥"), ("–Ø–π—Ü–∞", "—à—Ç"),
            ("–ú–æ–ª–æ–∫–æ", "–º–ª"), ("–ú–∞—Å–ª–æ", "–≥"), ("–°–æ–ª—å", "–≥")
        ]

        for name, unit in ingredients:
            Ingredient.objects.get_or_create(
                name=name, measurement_unit=unit
            )

    def setup_minio(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ MinIO bucket."""
        self.stdout.write("üóÇÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MinIO...")
        
        try:
            import boto3
            from botocore.exceptions import ClientError
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ settings
            minio_config = getattr(settings, 'AWS_S3_ENDPOINT_URL', None)
            access_key = getattr(settings, 'AWS_ACCESS_KEY_ID', None)
            secret_key = getattr(settings, 'AWS_SECRET_ACCESS_KEY', None)
            bucket_name = getattr(settings, 'AWS_STORAGE_BUCKET_NAME', 'foodgram-static')
            
            if not all([minio_config, access_key, secret_key]):
                self.stdout.write("‚ö†Ô∏è MinIO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç S3 –¥–ª—è MinIO
            s3_client = boto3.client(
                's3',
                endpoint_url=minio_config,
                aws_access_key_id=access_key,
                aws_secret_access_key=secret_key,
                region_name='us-east-1'
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ bucket
            try:
                s3_client.head_bucket(Bucket=bucket_name)
                self.stdout.write(f"‚úÖ Bucket {bucket_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            except ClientError as e:
                error_code = e.response['Error']['Code']
                if error_code == '404':
                    # Bucket –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                    try:
                        s3_client.create_bucket(Bucket=bucket_name)
                        self.stdout.write(f"‚úÖ Bucket {bucket_name} —Å–æ–∑–¥–∞–Ω")
                    except ClientError as create_error:
                        self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket: {create_error}")
                else:
                    self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ bucket: {e}")
                    
        except ImportError:
            self.stdout.write("‚ö†Ô∏è boto3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É MinIO")
        except Exception as e:
            self.stdout.write(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MinIO: {e}")

    def create_recipes(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
        self.stdout.write("üç≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤...")

        users = User.objects.filter(is_superuser=False)
        tags = Tag.objects.all()

        if not users.exists():
            return

        recipes_data = [
            {
                "name": "–ë–ª–∏–Ω—á–∏–∫–∏",
                "text": "–í–∫—É—Å–Ω—ã–µ –±–ª–∏–Ω—á–∏–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫",
                "cooking_time": 30,
                "tag_slug": "breakfast"
            },
            {
                "name": "–ë–æ—Ä—â",
                "text": "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ä—â",
                "cooking_time": 120,
                "tag_slug": "lunch"
            }
        ]

        for recipe_data in recipes_data:
            author = random.choice(list(users))

            recipe, created = Recipe.objects.get_or_create(
                name=recipe_data["name"],
                defaults={
                    "author": author,
                    "text": recipe_data["text"],
                    "cooking_time": recipe_data["cooking_time"],
                }
            )

            if created:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥
                tag = tags.filter(slug=recipe_data["tag_slug"]).first()
                if tag:
                    recipe.tags.add(tag)

                self.stdout.write(f"‚úÖ {recipe.name}")

    def print_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏."""
        self.stdout.write("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        self.stdout.write(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {User.objects.count()}")
        self.stdout.write(f"üè∑Ô∏è –¢–µ–≥–∏: {Tag.objects.count()}")
        self.stdout.write(f"ü•ï –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {Ingredient.objects.count()}")
        self.stdout.write(f"üç≥ –†–µ—Ü–µ–ø—Ç—ã: {Recipe.objects.count()}")

        self.stdout.write("\nüîë –î–æ—Å—Ç—É–ø:")
        self.stdout.write("–ê–¥–º–∏–Ω: admin@foodgram.ru / admin123")
        self.stdout.write("–¢–µ—Å—Ç: test@foodgram.ru / testpass123")
