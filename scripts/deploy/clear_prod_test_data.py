#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ.
–£–¥–∞–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ä–µ—Ü–µ–ø—Ç—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
"""

import os
import sys
import django
from django.db import transaction

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'foodgram.settings.production')
django.setup()

from django.db import models
from django.contrib.auth import get_user_model
from apps.recipes.models import Recipe, Favorite, ShoppingCart, Subscription, IngredientInRecipe

User = get_user_model()


def clear_test_users():
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_patterns = [
        'test',
        'demo',
        'example',
        'admin@example.com',
        'user@example.com',
        'test@test.com',
        'admin@admin.com',
    ]
    
    # –°–æ–∑–¥–∞–µ–º Q –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_q = models.Q()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    for pattern in test_patterns:
        test_q |= models.Q(username__icontains=pattern)
        test_q |= models.Q(email__icontains=pattern)
        test_q |= models.Q(first_name__icontains=pattern)
        test_q |= models.Q(last_name__icontains=pattern)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π
    test_q |= models.Q(username='')
    test_q |= models.Q(first_name='')
    test_q |= models.Q(last_name='')
    test_q |= models.Q(email='')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–∫–ª—é—á–∞—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_users = User.objects.filter(test_q).exclude(is_superuser=True)
    
    if test_users.exists():
        print(f"–ù–∞–π–¥–µ–Ω–æ {test_users.count()} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        for user in test_users:
            print(f"  - {user.username} ({user.email})")
        
        with transaction.atomic():
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            recipes_count = Recipe.objects.filter(author__in=test_users).count()
            favorites_count = Favorite.objects.filter(user__in=test_users).count()
            cart_count = ShoppingCart.objects.filter(user__in=test_users).count()
            subs_count = Subscription.objects.filter(
                models.Q(user__in=test_users) | models.Q(author__in=test_users)
            ).count()
            
            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            Recipe.objects.filter(author__in=test_users).delete()
            Favorite.objects.filter(user__in=test_users).delete()
            ShoppingCart.objects.filter(user__in=test_users).delete()
            Subscription.objects.filter(
                models.Q(user__in=test_users) | models.Q(author__in=test_users)
            ).delete()
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_count = test_users.count()
            test_users.delete()
            
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ:")
            print(f"  - {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            print(f"  - {recipes_count} —Ä–µ—Ü–µ–ø—Ç–æ–≤")
            print(f"  - {favorites_count} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö")
            print(f"  - {cart_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã")
            print(f"  - {subs_count} –ø–æ–¥–ø–∏—Å–æ–∫")
    else:
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


def clear_invalid_recipes():
    """–û—á–∏—â–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º Q –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
    invalid_q = models.Q()
    
    # –†–µ—Ü–µ–ø—Ç—ã –±–µ–∑ —Ç–µ–≥–æ–≤
    invalid_q |= models.Q(tags__isnull=True)
    
    # –†–µ—Ü–µ–ø—Ç—ã —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏
    invalid_q |= models.Q(name='')
    invalid_q |= models.Q(text='')
    invalid_q |= models.Q(cooking_time__lte=0)
    
    # –†–µ—Ü–µ–ø—Ç—ã –±–µ–∑ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    recipes_with_ingredients = IngredientInRecipe.objects.values_list('recipe_id', flat=True)
    invalid_q |= ~models.Q(id__in=recipes_with_ingredients)
    
    invalid_recipes = Recipe.objects.filter(invalid_q).distinct()
    
    if invalid_recipes.exists():
        print(f"–ù–∞–π–¥–µ–Ω–æ {invalid_recipes.count()} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤:")
        for recipe in invalid_recipes[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"  - {recipe.name} (ID: {recipe.id})")
        
        if invalid_recipes.count() > 10:
            print(f"  ... –∏ –µ—â–µ {invalid_recipes.count() - 10} —Ä–µ—Ü–µ–ø—Ç–æ–≤")
        
        with transaction.atomic():
            count = invalid_recipes.count()
            # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            recipe_ids = list(invalid_recipes.values_list('id', flat=True))
            Recipe.objects.filter(id__in=recipe_ids).delete()
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤")
    else:
        print("‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


def show_statistics():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {User.objects.count()}")
    print(f"  - –†–µ—Ü–µ–ø—Ç–æ–≤: {Recipe.objects.count()}")
    print(f"  - –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö: {Favorite.objects.count()}")
    print(f"  - –í –∫–æ—Ä–∑–∏–Ω–µ: {ShoppingCart.objects.count()}")
    print(f"  - –ü–æ–¥–ø–∏—Å–æ–∫: {Subscription.objects.count()}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ...")
    
    try:        
        show_statistics()
        clear_test_users()
        clear_invalid_recipes()
        show_statistics()
        
        print("\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main() 