#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å Postman —Ç–µ—Å—Ç–∞–º–∏.
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.
"""

import os
import sys
import django

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../backend'))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'foodgram.settings.production')
django.setup()

from django.contrib.auth import get_user_model
from django.db import models, transaction

User = get_user_model()


def fix_empty_user_fields():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏."""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏...")
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏
    users_with_empty_fields = User.objects.filter(
        models.Q(username='') | 
        models.Q(first_name='') | 
        models.Q(last_name='') |
        models.Q(email='')
    )
    
    count = users_with_empty_fields.count()
    print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏: {count}")
    
    if count > 0:
        for user in users_with_empty_fields:
            print(f"–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user.id}: username='{user.username}', email='{user.email}'")
            user.delete()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏")
    else:
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


def fix_duplicate_users():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è email
    duplicate_emails = User.objects.values('email').annotate(
        count=models.Count('email')
    ).filter(count__gt=1)
    
    for item in duplicate_emails:
        email = item['email']
        users = User.objects.filter(email=email).order_by('id')
        # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É–¥–∞–ª—è–µ–º
        users_to_delete = users[1:]
        for user in users_to_delete:
            print(f"–£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.email} (ID: {user.id})")
            user.delete()
    
    print("‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")


def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_count = User.objects.count()
    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–Ω—å—à–µ 10, —Å–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
    if user_count < 10:
        needed = 10 - user_count
        print(f"–°–æ–∑–¥–∞–µ–º {needed} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤...")
        
        for i in range(needed):
            username = f"testuser{i+user_count+1}"
            email = f"testuser{i+user_count+1}@example.com"
            
            if not User.objects.filter(email=email).exists():
                User.objects.create_user(
                    username=username,
                    email=email,
                    first_name=f"Test{i+1}",
                    last_name=f"User{i+1}",
                    password="testpassword123"
                )
                print(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {email}")
    
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å Postman —Ç–µ—Å—Ç–∞–º–∏...")
    
    try:
        with transaction.atomic():
            fix_empty_user_fields()
            fix_duplicate_users()
            create_test_data()
        
        print("\n‚úÖ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        print("üéØ –¢–µ–ø–µ—Ä—å Postman —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_users = User.objects.count()
        print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 