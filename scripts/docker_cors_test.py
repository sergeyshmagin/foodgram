#!/usr/bin/env python3
"""
Docker CORS Integration Test Script for Foodgram.
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Docker –æ–∫—Ä—É–∂–µ–Ω–∏–∏.
"""

import requests
import sys
import time


class DockerCORSTester:
    """–¢–µ—Å—Ç–µ—Ä CORS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ Docker –æ–∫—Ä—É–∂–µ–Ω–∏–∏."""
    
    def __init__(self):
        self.backend_url = "http://localhost"  # –ß–µ—Ä–µ–∑ nginx
        self.api_url = "http://localhost/api"  # API —á–µ—Ä–µ–∑ nginx  
        self.frontend_url = "http://localhost"  # Frontend —á–µ—Ä–µ–∑ nginx
        self.session = requests.Session()
        
    def test_docker_services(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Docker —Å–µ—Ä–≤–∏—Å–æ–≤."""
        print("üê≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        services = {
            "Frontend (Nginx)": "http://localhost",
            "API —á–µ—Ä–µ–∑ Nginx": "http://localhost/api/",  
            "Backend –ø—Ä—è–º–æ": "http://localhost:8000/api/",
            "MinIO Console": "http://localhost:9001"
        }
        
        results = []
        
        for service_name, url in services.items():
            try:
                response = self.session.get(url, timeout=10)
                status = "‚úÖ" if response.status_code in [200, 404] else "‚ùå"
                print(f"{status} {service_name}: {response.status_code}")
                results.append(response.status_code in [200, 404])
            except requests.RequestException as e:
                print(f"‚ùå {service_name}: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({e})")
                results.append(False)
        
        return any(results)  # –•–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
    
    def test_nginx_cors_headers(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ —á–µ—Ä–µ–∑ Nginx."""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS —á–µ—Ä–µ–∑ Nginx...")
        
        try:
            response = self.session.get(
                f"{self.api_url}/recipes/",
                headers={'Origin': 'http://localhost:3000'},
                timeout=10
            )
            
            cors_headers = {
                'Access-Control-Allow-Origin': response.headers.get('Access-Control-Allow-Origin'),
                'Access-Control-Allow-Methods': response.headers.get('Access-Control-Allow-Methods'),
                'Access-Control-Allow-Headers': response.headers.get('Access-Control-Allow-Headers'),
            }
            
            print(f"‚úÖ GET /api/recipes/ —á–µ—Ä–µ–∑ Nginx - Status: {response.status_code}")
            print("CORS Headers —á–µ—Ä–µ–∑ Nginx:")
            for header, value in cors_headers.items():
                if value:
                    print(f"  {header}: {value}")
                    
            return response.status_code == 200
            
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Nginx CORS: {e}")
            return False
    
    def test_api_endpoints_docker(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API endpoints –≤ Docker."""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints –≤ Docker...")
        
        endpoints = [
            '/api/recipes/',
            '/api/tags/',
            '/api/ingredients/',
            '/api/users/',
        ]
        
        results = []
        
        for endpoint in endpoints:
            try:
                response = self.session.get(
                    f"{self.backend_url}{endpoint}",
                    headers={'Origin': 'http://localhost'},
                    timeout=10
                )
                
                status = "‚úÖ" if response.status_code == 200 else "‚ùå"
                print(f"{status} GET {endpoint} - Status: {response.status_code}")
                
                results.append(response.status_code == 200)
                
            except requests.RequestException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {endpoint}: {e}")
                results.append(False)
        
        return all(results)
    
    def test_frontend_static_files(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞."""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
        
        try:
            # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            response = self.session.get(f"{self.frontend_url}/", timeout=10)
            
            if response.status_code == 200:
                print("‚úÖ Frontend –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                if 'react' in response.text.lower() or 'app' in response.text.lower():
                    print("‚úÖ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
                    return True
                else:
                    print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é")
                    return True
            else:
                print(f"‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - Status: {response.status_code}")
                return False
            
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {e}")
            return False
    
    def test_docker_networks(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏."""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker —Å–µ—Ç–µ–π...")
        
        # –¢–µ—Å—Ç —Å–≤—è–∑–∏ backend -> database (—á–µ—Ä–µ–∑ API)
        try:
            response = self.session.get(f"{self.api_url}/users/", timeout=10)
            if response.status_code == 200:
                print("‚úÖ Backend –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return True
            else:
                print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î - Status: {response.status_code}")
                return False
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    def run_docker_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ Docker —Ç–µ—Å—Ç—ã."""
        print("üê≥ –ó–∞–ø—É—Å–∫ Docker CORS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ Foodgram")
        print(f"Backend/API: {self.api_url}")
        print(f"Frontend: {self.frontend_url}")
        print("=" * 60)
        
        results = []
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤... (5 —Å–µ–∫—É–Ω–¥)")
        time.sleep(5)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        results.append(self.test_docker_services())
        results.append(self.test_nginx_cors_headers())
        results.append(self.test_api_endpoints_docker())
        results.append(self.test_frontend_static_files())
        results.append(self.test_docker_networks())
        
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ DOCKER –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        
        test_names = [
            "Docker —Å–µ—Ä–≤–∏—Å—ã",
            "CORS —á–µ—Ä–µ–∑ Nginx",
            "API endpoints",
            "Frontend —Å—Ç–∞—Ç–∏–∫–∞",
            "Docker —Å–µ—Ç–∏"
        ]
        
        for i, (test_name, result) in enumerate(zip(test_names, results)):
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{i+1}. {test_name}: {status}")
        
        overall_result = all(results)
        overall_status = "‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´" if overall_result else "‚ùå –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´"
        
        print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {overall_status}")
        
        if not overall_result:
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø DOCKER:")
            print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: docker-compose ps")
            print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs")
            print("3. –ü–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: docker-compose up --build")
            print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ nginx.conf")
        else:
            print("\nüéâ Docker –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        
        return overall_result


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    tester = DockerCORSTester()
    success = tester.run_docker_tests()
    
    sys.exit(0 if success else 1)


if __name__ == '__main__':
    main() 