#!/usr/bin/env python3
"""
CORS Integration Test Script for Foodgram
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–∂–¥—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º –∏ –±—ç–∫–µ–Ω–¥–æ–º
"""

import requests
import json
import sys
from urllib.parse import urljoin


class CORSTester:
    """–¢–µ—Å—Ç–µ—Ä CORS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, backend_url="http://localhost:8000", frontend_url="http://localhost:3000"):
        self.backend_url = backend_url
        self.frontend_url = frontend_url
        self.session = requests.Session()
        
    def test_cors_headers(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...")
        
        # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ GET –∑–∞–ø—Ä–æ—Å–∞
        try:
            response = self.session.get(
                f"{self.backend_url}/api/recipes/",
                headers={'Origin': self.frontend_url}
            )
            
            cors_headers = {
                'Access-Control-Allow-Origin': response.headers.get('Access-Control-Allow-Origin'),
                'Access-Control-Allow-Methods': response.headers.get('Access-Control-Allow-Methods'),
                'Access-Control-Allow-Headers': response.headers.get('Access-Control-Allow-Headers'),
                'Access-Control-Allow-Credentials': response.headers.get('Access-Control-Allow-Credentials'),
            }
            
            print(f"‚úÖ GET /api/recipes/ - Status: {response.status_code}")
            print("CORS Headers:")
            for header, value in cors_headers.items():
                if value:
                    print(f"  {header}: {value}")
                    
            return response.status_code == 200
            
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ GET –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False
    
    def test_preflight_request(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç preflight OPTIONS –∑–∞–ø—Ä–æ—Å"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ preflight –∑–∞–ø—Ä–æ—Å–∞...")
        
        try:
            response = self.session.options(
                f"{self.backend_url}/api/recipes/",
                headers={
                    'Origin': self.frontend_url,
                    'Access-Control-Request-Method': 'POST',
                    'Access-Control-Request-Headers': 'Content-Type, Authorization'
                }
            )
            
            print(f"‚úÖ OPTIONS /api/recipes/ - Status: {response.status_code}")
            
            cors_headers = {
                'Access-Control-Allow-Origin': response.headers.get('Access-Control-Allow-Origin'),
                'Access-Control-Allow-Methods': response.headers.get('Access-Control-Allow-Methods'),
                'Access-Control-Allow-Headers': response.headers.get('Access-Control-Allow-Headers'),
            }
            
            print("Preflight CORS Headers:")
            for header, value in cors_headers.items():
                if value:
                    print(f"  {header}: {value}")
                    
            return response.status_code in [200, 204]
            
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ preflight –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False
    
    def test_api_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ API endpoints"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö API endpoints...")
        
        endpoints = [
            '/api/recipes/',
            '/api/tags/',
            '/api/ingredients/',
            '/api/users/',
        ]
        
        results = []
        
        for endpoint in endpoints:
            try:
                response = self.session.get(
                    f"{self.backend_url}{endpoint}",
                    headers={'Origin': self.frontend_url}
                )
                
                status = "‚úÖ" if response.status_code == 200 else "‚ùå"
                print(f"{status} GET {endpoint} - Status: {response.status_code}")
                
                results.append(response.status_code == 200)
                
            except requests.RequestException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {endpoint}: {e}")
                results.append(False)
        
        return all(results)
    
    def test_authentication_flow(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å CORS"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "email": "test@example.com",
            "username": "testuser",
            "first_name": "Test",
            "last_name": "User",
            "password": "testpass123"
        }
        
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            response = self.session.post(
                f"{self.backend_url}/api/users/",
                headers={
                    'Origin': self.frontend_url,
                    'Content-Type': 'application/json'
                },
                json=user_data
            )
            
            if response.status_code in [201, 400]:  # 400 –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                print(f"‚úÖ POST /api/users/ - Status: {response.status_code}")
            else:
                print(f"‚ùå POST /api/users/ - Status: {response.status_code}")
                return False
            
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            login_data = {
                "email": user_data["email"],
                "password": user_data["password"]
            }
            
            response = self.session.post(
                f"{self.backend_url}/api/auth/token/login/",
                headers={
                    'Origin': self.frontend_url,
                    'Content-Type': 'application/json'
                },
                json=login_data
            )
            
            if response.status_code == 200:
                print(f"‚úÖ POST /api/auth/token/login/ - Status: {response.status_code}")
                token_data = response.json()
                token = token_data.get('auth_token')
                
                if token:
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                    return True
                else:
                    print(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    return False
            else:
                print(f"‚ùå POST /api/auth/token/login/ - Status: {response.status_code}")
                return False
                
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ CORS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ Foodgram")
        print(f"Backend: {self.backend_url}")
        print(f"Frontend: {self.frontend_url}")
        print("=" * 50)
        
        results = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±—ç–∫–µ–Ω–¥–∞
        try:
            response = self.session.get(f"{self.backend_url}/api/")
            if response.status_code != 200:
                print(f"‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {self.backend_url}")
                return False
            print(f"‚úÖ –ë—ç–∫–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω: {self.backend_url}")
        except requests.RequestException:
            print(f"‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {self.backend_url}")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        results.append(self.test_cors_headers())
        results.append(self.test_preflight_request())
        results.append(self.test_api_endpoints())
        results.append(self.test_authentication_flow())
        
        print("\n" + "=" * 50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        
        test_names = [
            "CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏",
            "Preflight –∑–∞–ø—Ä–æ—Å—ã",
            "API endpoints",
            "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"
        ]
        
        for i, (test_name, result) in enumerate(zip(test_names, results)):
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{i+1}. {test_name}: {status}")
        
        overall_result = all(results)
        overall_status = "‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´" if overall_result else "‚ùå –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´"
        
        print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {overall_status}")
        
        if not overall_result:
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –≤ backend/foodgram/settings/")
            print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ corsheaders —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:3000")
            print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
        
        return overall_result


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='CORS Integration Tester for Foodgram')
    parser.add_argument('--backend', default='http://localhost:8000', help='Backend URL')
    parser.add_argument('--frontend', default='http://localhost:3000', help='Frontend URL')
    
    args = parser.parse_args()
    
    tester = CORSTester(args.backend, args.frontend)
    success = tester.run_all_tests()
    
    sys.exit(0 if success else 1)


if __name__ == '__main__':
    main() 